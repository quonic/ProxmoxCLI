<#
Initally supporting and not supporting:

Create disks automaticly? Maybe
Not support paralel[n]
Not support serial[n]
Not support smbios1
Not support spice_enhancements
Not support startup
Not support template
Not support tpmstate0
Not support vga
Not support vmgenid, is autogenerated
Not support vmstatestorage
Not support watchdog, is do then it needs to be a param set with $Agent


TODO:
Create Kvm, switch, default $true
Create Machine, string, [ValidatePattern("(pc|pc(-i440fx)?-\d+(\.\d+)+(\+pve\d+)?(\.pxe)?|q35|pc-q35-\d+(\.\d+)+(\+pve\d+)?(\.pxe)?|virt(?:-\d+(\.\d+)+)?(\+pve\d+)?)")]
Create Name, string
Create net[n] as param set?
Create ipconfig as param set
 - Create Unique, switch, for mac address
Create Numa as param set, default 0
Create NoStartOnBoot, switch?
Create OsType, string, [ValidateSet("other","wxp","w2k","w2k3","w2k8","wvista","win7","win8","win10","win11","l24","l26","solaris")]
Create Pool, string, Validate pool name?
Create Protect, switch
Create Shares, int, [ValidateRange(0,50000)]
Create DisableSMP, switch
Create DisableSockets, switch
Create Start, switch
Create DefaultStorage, string
Create DisableTablet, switch
Create Tags, string[]
Create Usb as param set, PSCustomObject[]
 - HostDevice, string, validate how? if at all.
 - Usb3, switch/bool
Create VCPU, int, range 1,1028

#>

function New-VM {
    [CmdletBinding(DefaultParameterSetName = "Default")]
    [OutputType([PSObject[]])]
    param(
        [Parameter(Mandatory = $true)]
        [string]
        $Node,
        [Parameter(Mandatory = $true)]
        [string]
        $Id,
        [switch]
        $Agent,
        [hashtable]
        $QemuArgument,
        [switch]
        $AutoStart,
        [int]
        $Memory,
        [ValidateScript({ $_ -le $Memory })]
        [int]
        $Balloon,
        # Disk name(s), ie ide0, sata0, sata1, scsi0
        [string[]]
        $BootOrder,
        [ValidateSet("seabios", "ovmf")]
        [string]
        $Bios = "seabios",
        # Volume path to iso or physical disk, this is an alias for option ide2
        [string]
        $Cdrom,
        [Parameter(Mandatory, ParameterSetName = "CloudInit")]
        [ValidateSet("nocloud", "configdrive2", "opennebula")]
        [string]
        $CloudInit,
        # Creates a user name
        [Parameter(Mandatory, ParameterSetName = "CloudInit")]
        [string]
        $User,
        # OpenSSH formatted key. One key is support at this time.
        [Parameter(Mandatory, ParameterSetName = "CloudInit")]
        [string]
        $SshKey,
        [Parameter(ParameterSetName = "CloudInit")]
        [string]
        $NameServer
    )
    
    begin {
    }
    
    process {
        if ($QemuArgument) {
            $Arguments = $QemuArgument | ForEach-Object { "-$($_.Key)$(if($_.Value){"=$_.Value"})" } -join ' '
        }
        $Splat = @{
            node      = $Node
            vmid      = $Id
            agent     = "enable=$(if ($Agent) { 1 }else { 0 })"
            arguments = $Arguments
            autostart = $AutoStart
        }
        New-NodeQemu @Splat
    }
    
    end {
    }
}